###info
title=자바스크립트 호이스팅(javascript hoisting)
created=2015-04-15
ad=true
category=JavaScript
tags=JavaScript
###
#p 자바스크립트를 공부하다보면 다른 언어와 다른점이 몇가지 있습니다. 그 중 호이스팅(Hoisting)이라 불리는 것이 있는데 이 포스팅은 호이스팅에 대해 알아보는 것에 촛점을 맞췄습니다.
#h4 호이스팅(hoisting) 
#p hoisting은 hoist라는 단어에서 출발합니다. "끌어 올리는 장치", "끌어 올리기"라는 뜻입니다. 자바스크립트에서도 호이스팅은 마찬가지로 {!끌어 올린다}는 것이 포인트입니다.
#p 그렇다면 끌어올려지는건 무엇일까요? 바로 변수(variable)입니다. 호이스팅은 변수를 끌어올리는 것을 말합니다. 실제로 코드를 볼까요.
###code.js
function getX(){
	console.log(x); // undefined
	var x = 100;
	console.log(x); // 100
}

getX();
### 
#p  위의 코드를 보면 나오는 값을 추측할 수 있습니다. 다만 C++같은 언어로 위와 같은 소스 코드를 짠다면 아래처럼 됩니다.  
###code.cpp
void getX(){
	// error: 'x' was not declared in this scope
	cout &lt;&lt; x &lt;&lt; endl;
	int x = 100;
	cout &lt;&lt; x &lt;&lt; endl;
}
int main(void){
	getX();
}
### 
#p  보다시피 변수 x를 찾지 못해 컴파일 오류가 납니다. 하지만 자바스크립트는 단지 `undefined`라 출력하고 이후의 진행을 계속합니다. 자바스크립트는 느슨한 언어니까 자동으로 그런건 넘어가는걸까요?
#p  이것에 대한 해답은 {!호이스팅}에 있습니다. 자바스크립트 호이스팅에 의해 처음에 봤던 자바스크립트 코드는 다음처럼 자바스크립트 엔진이 처리합니다.  
###code.js
function getX(){
	var x;
	console.log(x); // undefined
	x = 100;
	console.log(x); // 100
}

getX();
### 
#p  `var x;` 구문이 끌어 올려진 것이 바로 호이스팅입니다. 다만 실제 값이 할당되는 것은 그 이후이기 때문에 그전에는 콘솔로 출력해봐도 "undefined"만 나옵니다.
#p  가능하면 변수는 함수 내 최상단에 먼저 선언(declare)한 이후에 사용하는 습관을 들여야 할 것 같네요. 
