###info
title=SpringBoot JPA 예제(@ManyToOne, 단방향)
created=2015-05-22
ad=true
category=Spring
tags=Spring
###
#p  @ManyToOne 어노테이션을 이용한 단방향 JPA 관계 예제입니다. 
#h2 준비 
#p  이 포스트는 {$/blog/141|SpringBoot JPA 예제(@OneToMany, 단방향)}에서 파생 되었습니다. 예제 코드도 링크를 클릭해서 확인 해보시면 됩니다. 
#h2 @ManyToOne 
#p `@ManyToOne` 어노테이션은 `@OneToMany`와 크게 다르지 않습니다. 다만 `@OneToMany`가 1:N이라고 한다면 `@ManyToOne`은 N:1 관계라고 보면 됩니다. 예를 들머 회원과 핸드폰의 관계에서 핸드폰을 보면 됩니다. 핸드폰은 자신을 소유한 회원이 있습니다. 하지만 이 회원은 핸드폰을 여러개 소지할 수도 있고 하나만 소지할 수도 있겠죠. 회원쪽에서 핸드폰을 바라본다면 `@OneToMany` 관계지만 핸드폰이 회원을 바라본다면 `@ManyToOne`이 되는겁니다.
#h3 @ManyToOne 속성 
#p `@ManyToOne` 속성에는 다음과 같은 것들이 있습니다.
###ul  
#li targetEntity
#li cascade
#li fetch
#li optional
### 
#p `@OneToMany`에서 못보던 optional이라는 항목이 있네요.
#h4 optional 
#p  이 항목은 `false`로 설정했을 때 해당 객체에 `null`이 들어갈 수 있습니다. 반대로 반드시 값이 필요하다면 `true`가 들어갑니다. 기본값은 `true`입니다.
#h3 단방향 @ManyToOne 예제 
#p  단방향 `@ManyToOne` 예제를 진행합니다.
#h4 Table 
#p  테이블은 아래처럼 구성 되어있습니다. MariaDB입니다.  
###code.sql
CREATE TABLE &#96;member&#96; (
	&#96;seq&#96; INT(10) NOT NULL AUTO_INCREMENT,
	&#96;name&#96; VARCHAR(50) NULL DEFAULT NULL,
	PRIMARY KEY (&#96;seq&#96;)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=1;
### 
###code.sql
CREATE TABLE &#96;phone&#96; (
	&#96;seq&#96; INT(10) NOT NULL AUTO_INCREMENT,
	&#96;member_id&#96; INT(10) NULL DEFAULT NULL,
	&#96;no&#96; VARCHAR(50) NULL DEFAULT NULL,
	PRIMARY KEY (&#96;seq&#96;)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB
AUTO_INCREMENT=1;
### 
#h4 Entity 
#p  회원 Entity 및 핸드폰 Entity를 만듭니다.  
#h5 Member Entity 
###code.java
package jpa3;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

@Entity
public class Member {
	
	@Id
	@Column(name="seq")
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int seq;
	
	@Column(name="name")
	private String name;

	public Member(){}
	
	public Member(String name){
		this.name = name;
	}

	public int getSeq() {
		return seq;
	}

	public void setSeq(int id) {
		this.seq = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	@Override
	public String toString() {
		String result = "[member_"+seq+"] " + name;
		return result;
	}
}
### 
#p  회원 Entity는 그다지 특별한 것은 없습니다. 일반적인 Entity 구성을 따릅니다.  
#h5 Phone Entity 
###code.java
package jpa3;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;

@Entity
public class Phone {
	
	@Id
	@Column(name="seq")
	@GeneratedValue(strategy=GenerationType.AUTO)
	private int seq;

	@Column(name="no")
	private String no;

	@ManyToOne(targetEntity=Member.class, fetch=FetchType.LAZY) // (1)
	@JoinColumn(name="member_id") // (2)
	private Member member;
	
	public Phone() {}
	public Phone(String no){
		this.no = no;
	}

	public int getSeq() {
		return seq;
	}

	public void setSeq(int seq) {
		this.seq = seq;
	}

	public String getNo() {
		return no;
	}

	public void setNo(String no) {
		this.no = no;
	}
	
	public Member getMember() {
		return member;
	}
	
	public void setMember(Member member) {
		this.member = member;
	}	
	
	@Override
	public String toString() {
		String result = "[phone_"+seq+"] " + no;
		return result;
	}
	
}
### 
#p  {!(1)}에 `@ManyToOne` 어노테이션이 붙어 있습니다. 여기에서 관계를 설정할 매핑 정보를 넣습니다. 이 포스트에서는 LAZY 전략을 사용합니다. 그리고 Member Entity를 사용한다고 명시적으로 정의를 했습니다. {!(2)}에 `@JoinColumn` 어노테이션이 있는데 여기에 현재 Entity에서 관계할 Entity에 매핑할 키 값을 정의합니다. 즉, phone 테이블의 member_id 컬럼이 member 테이블 seq로 정의 됩니다. member entity에서 seq가 `@Id` 어노테이션으로 정의가 되어 있음을 살펴보세요.
#h4 Repository 
#p  Repository는 간단하게 코드만 보고 넘어가겠습니다.  
###code.java
package jpa3;

import org.springframework.data.jpa.repository.JpaRepository;

public interface MemberRepository extends JpaRepository&lt;Member, Integer&gt;{}
### 
###code.java
package jpa3;

import org.springframework.data.jpa.repository.JpaRepository;

public interface PhoneRepository extends JpaRepository&lt;Phone, Integer&gt; {}
### 
#h3 Application 
#p  실제로 위의 코드를 돌려보는 프로그램을 작성합니다.  
###code.java
package jpa3;

import java.util.List;

import javax.transaction.Transactional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Jpa3Application implements CommandLineRunner{

	@Autowired
	private MemberRepository mr;
	
	@Autowired
	private PhoneRepository pr;
	
   public static void main(String[] args) {
       SpringApplication.run(Jpa3Application.class, args);
   }

	@Override
	@Transactional
	public void run(String... args) throws Exception {
		
		Member first = new Member("Jung");
		Member second = new Member("Dong");
		Member third = new Member("Min");
		
		mr.save(first);
		mr.save(second);
		mr.save(third);
		
		Phone p = new Phone("010-XXXX-YYYY");
		p.setMember(first);
		pr.save(p);
		
		List&lt;Phone&gt; phone = pr.findAll();
		
		for( Phone e : phone ){
			System.out.println(e.toString() +" "+ e.getMember().toString());
		}
		
		mr.deleteAll();
		pr.deleteAll();
	}
}
### 
###console
[phone_111] 010-XXXX-YYYY [member_155] Jung
### 
#p  {!29~36번째 라인}은 새로운 회원을 생성합니다. 그리고 {!33~35번째 라인}에서 해당 정보를 DB에 저장합니다. {!37~39번째 라인}에서 새로운 핸드폰 하나를 만들고 한 회원의 소유로 정의하고 저장합니다. {!41 ~ 45번째 라인}에서는 핸드폰의 전체 목록을 가져와서 하나씩 자신의 정보와 소유주를 출력합니다.  
#h4 참조 
#p  지난 번 포스팅과는 다르게 이번엔 LAZY 전략을 사용하면서 `@Transactional` 어노테이션 정의를 이용했습니다.
#h2 마무리 
#p  `@ManyToOne` 단방향 예제에 대해 알아봤습니다. 다음번엔 1:N 양방향 관계에 대해 알아보아요. :)
