###info
title=아파치 스톰 클러스터 구축(Apache Storm Cluster Setup)
created=2015-11-18
ad=true
category=ETC
tags=apache storm
###

#h2 Apache Storm Cluster Setup
#p 스톰 클러스터를 구축해 봅시다. {!이 포스트는 클러스터 구축에만 초점이 맞춰져 있습니다.} 용어에 대한 설명은 간략하게 하거나 또는 없을 수 있습니다. :)

#h3 Prepare to library for Storm Cluster Setup
#p 우선 다음 목록에 있는 프로그램들을 설치해야 합니다.
###box.none
###ul
#li Java 6 이상(가능하다면 8 이상 추천)
#li Python 2.6.6 이상
###
###
#p 위 프로그램들은 버전을 먼저 확인해보고 설치 되어있다면 지나갑니다. 다만 파이썬은 버전에 민감할 수 있으니 {!문제가 생기면 파이썬 버전을 맞춰봅시다.}

#h3 Zookeeper Cluster Setup
#p 다음은 주키퍼 클러스터를 구축합니다. 구축 방법은 {$/blog/214|Zookeeper Cluster(Multi-Node)} 링크를 확인하세요.

#h3 Storm Cluster Hosts
#p 주키퍼 클러스터 구축까지 끝났으면 스톰 클러스터를 구축해봅시다. 다음과 같은 호스트들을 준비하고 진행합니다. 이번 포스트에서는 호스트 3대를 기준으로 구축합니다.

###box.none
###ul
#li storm-1.jdm.kr - nimbus(master)
#li storm-2.jdm.kr
#li storm-3.jdm.kr
###
###

#h3 Download Apache Storm Package(Each node)
#p 스톰 패키지를 다운로드 받아야 합니다. {!모든 노드에서 진행}합니다. 저는 {@0.10.0} 버전으로 진행했습니다.
###code.sh
$ wget http://apache.mirror.cdnetworks.com/storm/apache-storm-0.10.0/apache-storm-0.10.0.tar.gz
$ tar -xzf apache-storm-0.10.0.tar.gz
$ ln -s apache-storm-0.10.0 storm
$ cd storm
###

#h3 Storm Configuration(Each node)
#p 모든 노드에 스톰 패키지를 다운로드 받았다면 환경설정을 해봅시다. 이부분 역시 모든 노드에서 진행합니다. 참고로 {@_storm_root_}이 뜻하는 것은 스톰 패키지가 존재하는 루트 디렉토리입니다.
#p 수정할 파일은 {@_storm_root_/conf/storm.yaml} 파일입니다.

###code.sh
$ cd _storm_root_/conf
$ vi storm.yaml
###
#p 파일을 열어 다음처럼 수정합니다.
###code.sh
# storm.yaml
storm.zookeeper.servers:
  - "zoo-1.jdm.kr"
  - "zoo-2.jdm.kr"
  - "zoo-3.jdm.kr"

nimbus.seeds: ["storm-1.jdm.kr"]
###

#h3 Start Storm Cluster
#p 환경 설정까지 끝났다면 이젠 구동시켜야 할 차례입니다. 호스트 중에서 1번 호스트{=storm-1.jdm.kr}는 {@nimbus(master)}가 옆에 있었다는 것 기억하시나요?
#p 이번 포스트에서 1번 호스트는 님버스{=nimbus} 서버의 역할도 같이 합니다. 자세한 내용은 {$http://storm.apache.org/documentation.html|스톰 문서}를 확인하세요.

#h4 Start nimbus(first node only)
#p 님버스는 마스터 노드에서 실행하는 데몬입니다. 다음과 같은 커맨드를 1번 노드에서만 진행합니다.
###code.sh
$ nohup _storm_root_/bin/storm nimbus >> nimbus.log 2>&1 &
###

#h4 Start supervisor(Each node)
#p 슈퍼바이저는 워커 노드에서 실행하는 데몬입니다. 각각의 노드에서 다음과 같은 커맨드로 기동합니다.
###code.sh
$ nohup _storm_root_/bin/storm supervisor >> supervisor.log 2>&1 &
###

#h4 Start storm UI(first node only)
#p 스톰 UI를 기동하는데 1번 노드에서만 진행합니다. 스톰 UI라는 것은 스톰 클러스터를 모니터링할 수 있게 도와주는 시각화 도구입니다. 웹으로 확인 할 수 있으므로 편리합니다.
###code.sh
$ nohup _storm_root_/bin/storm ui >> ui.log 2>&1 &
###
#p {@http://storm-1.jdm.kr:8080/index.html}에 접속해서 스톰 클러스터의 전체적인 상황을 확인 할 수 있습니다.
###box.green
#p {!{+help} TIP.} 스톰 UI에서 확인할 수 있는 정보를 REST API로도 확인할 수 있습니다. {$https://github.com/apache/storm/blob/master/docs/documentation/ui-rest-api.md}를 참조하세요.
###

#h4 Start Logviewer(Each node)
#p 로그뷰어{=Logviewer}는 스톰 UI에서 로그 파일을 바로 읽어볼 수 있도록 해주는 플러그인 같은 역할을 합니다.
###code.sh
$ nohup _storm_root_/bin/storm logviewer > logviewer.log &
###

#h4 Start Example Topology(first node only)
#p 예제로 주어진 토폴로지{=Topology}를 실행시켜 봅시다. 1번 노드에서 진행합니다. 아래와 같은 방법으로 구동시켜볼 수 있습니다
###code.sh
# 예제 토폴로지 jar를 님버스에 업로드하는 과정입니다.
$ _storm_root_/bin/storm jar ../examples/storm-starter/storm-starter-topologies-0.10.0.jar storm.starter.RollingTopWords production-topology remote
###
###box.green
#p {!{+help} TIP.} 토폴로지를 배포할때에 님버스 노드에서만 진행해도 클러스터로 설정된 다른 노드들로 전파가 됩니다.
###
#p 스톰 UI에서 Topology summary 부분에 production-topology 이름의 토폴로지가 있다면 제대로 실행된 겁니다. 더 자세한 정보는 아래 위치의 README 파일을 읽어보시면 됩니다.
###code.sh
$ cd _storm_root_/examples/storm-starter
###

#h4 Kill Example Topology(first node only)
#p 토폴로지 프로세스를 내리는 방법은 많이 있지만 대표적으로 스톰 UI에서 {@Kill} 버튼으로 내리던지 아니면 커맨드 라인으로 실행합니다.
###code.sh
$ _storm_root_/bin/storm kill production-topology 1
###
#p 물론 {@Kill} 외에도 다양한 커맨드가 존재합니다. 자세한 내용은 {$http://storm.apache.org/documentation/Command-line-client.html}를 확인하세요.

#h2 Closing Remarks
#p 간단하게 스톰 클러스터 구축에 대해 알아봤습니다. :)