###info
title=MongoDB Document & Collection & Insert
created=2014-10-13
ad=true
category=MongoDB
tags=MongoDB
###

#p {$/blog/16|저번 포스팅}에서 몽고DB의 설치 및 간단한 환경 구성과 데이터베이스 생성까지 해봤다. 이번엔 Windows7 상에서 기본적인 쿼리를 사용해보려 한다.

#h2 Access MongoDB Shell
#p 다시 한번 몽고DB를 띄워보자.

###console
C:\Program Files\MongoDB 2.6 Standard\bin>mongod.exe --dbpath "C:\Program Files\MongoDB 2.6 Standard\data"
C:\Program Files\MongoDB 2.6 Standard\bin>mongo.exe
###
#p {=* 두줄의 커맨드는 각각 다른 명령 프롬프트로 띄워서 실행해야 한다.}
#h2 Document & Collection
#p MongoDB에서 문서{=Document}와 콜렉션{=Collection}에 대해 알아보자.
#h3 Create Document
#p 몽고DB에서는 RDBMS에서의 일반적인 row 개념이 아닌 {@Document}를 사용한다. 일반적인 자바스크립트 오브젝트와 같은 객체들을 말하는데 이를테면 다음처럼 정의한다.
###code.js
x = { name : "test" }
y = { x : 2014 }
###

#h3 insert Document in Collection
#p 이번엔 만들어진 Document들을 RDBMS의 테이블과 비슷한 "Collection"에 삽입해 보자. 다음처럼 입력하면 된다.

###code.js
db.tbl.insert(x)
db.tbl.insert(y)
###

#p {@tbl}이라는 Collection에 아까전 만들어뒀던 Document를 삽입했다. 따로 스키마를 정의할 필요 없이 db에서 참조할 Collection명을 쓰면된다.

#h3 View Collections
#p 다음으로 정말 삽입이 됐는지 tbl Collection을 살펴보자. 다음처럼 입력한다.
###console
show collections
###
#p 오라클 DB에서 제공하는 {@select * from tabs} 처럼 흡사하게 모든 Collection들을 콘솔에 출력해준다. 아까 만들었던 {@tbl}이라는 이름의 Collection도 확인 가능하다.

#h3 Find Document
#p 이번엔 해당 콜렉션에서 가지고 있는 문서를 찾아보자. {@find()} 명령어를 쓰면 된다. 다음처럼 입력해보자.
###console
db.tbl.find()
###

#p 그러면 다음처럼 콘솔에 출력된다.
###console
{ "_id" : ObjectId("543b4c38e3b55c432e855da4"), "name" : "test" }
{ "_id" : ObjectId("543b4c3be3b55c432e855da5"), "x" : 2014 }
###

#p 여기서 {@_id} 필드가 보이는데 모든 Document들은 이 필드가 반드시 있어야 한다. {@_id} 필드는 고유한 값(Unique value)을 가진다. 여기서 {@_id} 필드는 명시적으로 값을 지정 안했기 때문에 콜렉션에 삽입하기 전 고유한 {@_id} 값을 생성한다.

#h2 Multiple Insert
#p 다중 문서 삽입에 대해 알아보자.
#h3 For문을 이용한 다중 문서 삽입
#p 기본적인 자바스크립트 오브젝트를 이용해 {@Document}를 생성 할 수 있고 또한 for문도 가능하다. 다음처럼 입력하면 된다.
###code.js
/* multiple insert */
for( var i = 0; i &lt;= 20; i++ ){
db.tbl.insert( { x : i } );
}
###
#p {@db.tbl.find()}를 통해 확인해보면 고유의 {@_id} 필드값을 가지면서 x값이 1부터 20까지 삽입 되어 있는 것을 확인 할 수 있다. 하지만 전부 출력 되지 않고 {@Type "it" for more}이라는 문구가 콘솔에 출력된다. 여기서 {@it}을 입력하면 나머지 미출력된 부분도 확인 할 수 있다.

#h3 자바스크립트 함수를 이용한 다중 문서 삽입
#p 자바스크립트의 기본 문법 중 "for문"을 이용한 문서 삽입을 방금 전에 해봤으니 이번엔 {@Function}을 이용한 다중 문서 삽입을 해보자. 다음처럼 쉘 커맨드를 입력한다.

###code.js
/* use Function*/
function insert(dbName, colName, num){
var col = db.getSiblingDB(dbName).getCollection(colName);
for( i = 0 ; i &lt; num; i++ ){
    col.insert( {x : i} );
}
print( "total : " + col.count() + " document." );
}
###

#p 아무런 오류 출력 없이 깔끔하게 입력 됐다면 다음 커맨드를 입력하자.
###code.js
insert( "test", "func", 2)
###

#p {@test}라는 데이터베이스의 func 콜렉션에 2까지 입력한 것이다. 콘솔에 {!total : 2 document.}를 확인하자. {@db.func.find()}를 이용해 확인해 보면 {@Document}가 2개 들어 있는 것을 확인 할 수 있다.

#h2 Reference
###ul
#li {$http://docs.mongodb.org/manual/tutorial/getting-started/#create-a-collection-and-insert-documents}
#li {$http://docs.mongodb.org/manual/tutorial/generate-test-data}
###