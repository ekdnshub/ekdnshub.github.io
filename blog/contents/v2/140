###info
title=SpringBoot JPA 예제(결합 인덱스)
created=2015-05-21
ad=true
category=Spring
tags=Spring
###
#p  Springboot JPA 2탄입니다. Springboot나 Spring이나 JPA 적용하는 법은 같아요. 이번에는 PK가 하나가 아닌 2개인 경우의 테이블을 JPA Repository로 구성하는 법을 알아봅니다. 
#h2 준비 
#p  이 포스팅은 {$/blog/121|SpringBoot JPA 예제}에서 파생되었습니다. JPA에 대해 기본적인 사용 방법을 설명해 놓았습니다. 
#p  또한 이번 포스팅에서 사용하는 DB는 MariaDB입니다.  
#h2 예제 
#p  실제 소스 코드를 하나씩 구성해 보면서 알아가 봅시다.  
#h3 DB Table 
###code.sql
CREATE TABLE &#96;member&#96; (
	&#96;id&#96; INT(10) NULL,
	&#96;name&#96; VARCHAR(50) NULL,
	&#96;age&#96; INT NULL,
	PRIMARY KEY (&#96;id&#96;, &#96;name&#96;)
)
COLLATE='utf8_general_ci'
ENGINE=InnoDB;
### 
#p  MariaDB에 위와 같은 member 테이블을 구축합니다. 이 테이블은 id, name, age를 컬럼으로 가지고 있으며 id와 name을 묶어서 결합 인덱스(PK)를 가집니다. 이제 이 테이블을 자바 JPA Entity로 바꿔봅시다.  
#h3 EntityPK 
#p  먼저 결합 인덱스를 표현할 클래스를 하나 만듭니다. 클래스 이름은 MemberPK입니다. 소스 코드는 아래와 같습니다.  
###code.java
package jpa2;

import java.io.Serializable;
import javax.persistence.Column;
import javax.persistence.Embeddable;

@Embeddable
public class MemberPK implements Serializable {

	private static final long serialVersionUID = 1L;

	@Column(name="id", nullable=false)
	private Long id;
	
	@Column(name="name", nullable=false)
	private String name;
	
	public MemberPK(){}
	
	public MemberPK(long id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
}
### 
#p  여기서 `@Embeddable` 어노테이션을 정의해야 합니다. 그리고 내부 멤버 변수로는 결합할 컬럼들을 넣어줍니다. 그리고 {!"기본 생성자"}는 꼭 넣어주세요.
#h3 Entity 
#p  그리고 MemberPK를 가진 Member Entity 클래스를 만듭니다. 소스 코드는 아래와 같습니다.  
###code.java
package jpa2;

import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;

@Entity
public class Member {

	@EmbeddedId
	private MemberPK pk;

	@Column
	private int age;

	public Member() {}

	public Member(MemberPK pk, int age) {
		this.pk = pk;
		this.age = age;
	}

	public MemberPK getPk() {
		return pk;
	}

	public void setPk(MemberPK pk) {
		this.pk = pk;
	}

	public int getAge() {
		return age;
	}

	public void setAge(int age) {
		this.age = age;
	}
}
### 
#p  여기서 결합 인덱스와 age 컬럼을 가지는 Member Entity를 만들었습니다. 하지만 별도로 id, name 컬럼을 더 넣으면 컬럼이 반복되었다는 오류가 나오니 넣지 않습니다. 결합 인덱스를 나타내기 위해 일반 `@Id` 어노테이션이 아닌 `@EmbeddedId` 어노테이션을 선언합니다.
#h3 Repository 
#p  마지막으로 Member Repository 인터페이스를 만듭니다. 소스 코드는 아래와 같습니다.  
###code.java
package jpa2;

import org.springframework.data.repository.CrudRepository;

public interface MemberRepository extends CrudRepository&lt;Member, MemberPK&gt; {
}
### 
#p  CrudRepository를 상속 받았지만 JpaRepository를 상속 받아도 됩니다. 두 Repository의 차이점은 JpaRepository가 CrudRepository 및 PagingAndSortingRepository를 포함하고 있습니다. 따라서 일반적인 CRUD 기능만 사용한다면 CrudRepository를 상속받고 그 외 기능이 필요하면 JpaRepository를 상속 받으세요.  
#p  한번 더 정리하면 아래처럼 되어 있습니다.  
###code.java
public interface JpaRepository&lt;T, ID extends Serializable&gt; extends PagingAndSortingRepository&lt;T, ID&gt;
public interface PagingAndSortingRepository&lt;T, ID extends Serializable&gt; extends CrudRepository&lt;T, ID&gt;
public interface CrudRepository&lt;T, ID extends Serializable&gt; extends Repository&lt;T, ID&gt;
public interface Repository&lt;T, ID extends Serializable&gt;
### 
#h3 실행 
#p  스프링 부트 어플리케이션이니 실행시키기 위해 아래와 같은 소스 코드를 짰습니다.  
###code.java
package jpa2;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class Jpa2Application implements CommandLineRunner {
	
	@Autowired
	MemberRepository memberRepository;

	public static void main(String[] args) {
		SpringApplication.run(Jpa2Application.class, args);
	}

	@Override
	public void run(String... args) throws Exception {
		memberRepository.save(new Member(new MemberPK(1, "Jung"), 25));
	}
}
### 
#p  위 소스 코드는 결합 인덱스키를 가진 Member 테이블에 새로운 Row를 삽입하는 예제입니다. 위 프로그램을 실행 시키고 DB 데이터를 확인해 보면 예쁘게 들어가 있는 것을 확인 할 수 있습니다. 
